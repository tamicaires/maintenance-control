generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id
  name        String
  email       String    @unique
  password    String
  role        Role      @default(USER)

  createdAt   DateTime  @map("created_at")
  updatedAt   DateTime  @map("updated_at")

  @@map("users")
  notes        Note[]
  workOrder    WorkOrder[]
}

enum Role {
  USER
  ADMIN
}

model Note {
  id            String    @id
  title         String    
  description   String?
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  createdAt   DateTime  @map("created_at")
  updatedAt   DateTime  @map("updated_at")
  @@map("notes")
}

model Fleet {
  id                    String  @id
  fleetNumber           String  
  plate                 String
  first_trailer_plate   String
  second_trailer_plate  String
  third_trailer_plate   String
  km                    String
  status                Status   @default(ATIVO) 
  carrier               Carrier  @relation(fields: [carrierId], references: [id])
  carrierId             String   @map("carrier_id") 

  createdAt   DateTime  @map("created_at")
  updatedAt   DateTime  @map("updated_at")
  @@map("fleets")
  work_orders           WorkOrder[]
}

model Carrier {
  id                    String   @id
  carrierName           String   @unique 
  managerName           String
  managerPhone          String
  status                Status  @default(ATIVO)

  createdAt   DateTime  @map("created_at")
  updatedAt   DateTime  @map("updated_at")

  @@map("carries") 
  fleets                Fleet[]   
}

enum Status {
  ATIVO
  INATIVO
}

model Employee {
  id          String      @id
  name        String      @unique
  workShift   String  
  status      Status      @default(ATIVO)
  jobTitle    Job         @relation(fields: [jobTitleId], references: [id]) 
  jobTitleId  String

  createdAt   DateTime  @map("created_at")
  updatedAt   DateTime  @map("updated_at")
  @@map("employees")
  serviceAssignments    ServiceAssignment[]
}

model Job {
  id          String  @id
  jobTitle    String  @unique @map("job_title")

  @@map("job_titles")
  employees     Employee[]
}

model Service {
  id                String  @id
  serviceName       String  @unique @map("service_name")
  serviceCategory   ServiceCategory @map("service_category")

  @@map("services")
  serviceAssignmets    ServiceAssignment[]
}

enum ServiceCategory {
  STRUCTURE
  ELETRICAL
  PNEUMATIC
  BRAKES
  WELDING
  TIRE_REPAIR
}

model WorkOrder {
  id                    String     @id
  severityLevel         String     @map("severity_level")
  entryQueue            DateTime?  @map("entry_queue")
  entryMaintenance      DateTime?  @map("entry_maintenance")
  exitMaintenance       DateTime?  @map("exit_maintenance")
  status                MaintenanceStatus
  fleet                 Fleet      @relation(fields: [fleetId], references: [id])
  fleetId               String
  user                  User       @relation(fields: [userId], references: [id])
  userId                String     
  typeOfMaintenance     TypeOfMaintenance
  box                   Box?

  createdAt             DateTime  @map("created_at")
  updatedAt             DateTime  @map("updated_at")
  @@map("work_orders")
  serviceAssignments    ServiceAssignment[]
}

model ServiceAssignment {
  id              String     @id
  workOrder       WorkOrder  @relation(fields: [workOrderId], references: [id])
  workOrderId     String     @map("word_order_id")
  service         Service    @relation(fields: [serviceId], references: [id])
  serviceId       String  
  employee        Employee   @relation(fields: [employeeId], references: [id])
  employeeId      String     @map("employee_id")

  createdAt       DateTime   @map("created_at")
  updatedAt       DateTime   @map("updated_at")
  @@map("service_assignments")
}

enum MaintenanceStatus {
  QUEUE
  MAINTENANCE
  WAITING_PARTS
  FINISH
}

enum TypeOfMaintenance {
  PREDICTIVE
  PREVENTIVE
  CORRECTIVE
}

enum Box {
  ONE
  TWO
  THREE
  FOUR
  FIVE
  SIX
  SEVEN
  EIGHT
}